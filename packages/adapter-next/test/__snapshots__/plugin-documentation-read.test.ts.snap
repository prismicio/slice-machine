// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`PageSnippet > App Router > return a snippet with JavaScript 1`] = `
{
  "content": "## Create your Foobar's page component

Add a new route by creating an \`app/[uid]/page.js\` file. (If the route should be nested in a child directory, you can create the file in a directory, like \`app/marketing/[uid]/page.js\`.)

Paste in this code:

~~~js [app/[uid]/page.js]
import { Metadata } from \\"next\\";
import { notFound } from \\"next/navigation\\";
import { asImageSrc } from \\"@prismicio/client\\";
import { SliceZone } from \\"@prismicio/react\\";

import { createClient } from \\"@/prismicio\\";
import { components } from \\"@/slices\\";

export default async function Page({ params }) {
	const { uid } = await params;
	const client = createClient();
	const page = await client.getByUID(\\"foo_bar\\", uid).catch(() => notFound());

	return <SliceZone slices={page.data.slices} components={components} />;
}

export async function generateMetadata({ params }) {
	const { uid } = await params;
	const client = createClient();
	const page = await client.getByUID(\\"foo_bar\\", uid).catch(() => notFound());

	return {
		title: page.data.meta_title,
		description: page.data.meta_description,
		openGraph: {
			images: [{ url: asImageSrc(page.data.meta_image) ?? \\"\\" }],
		},
	};
}

export async function generateStaticParams() {
	const client = createClient();
	const pages = await client.getAllByType(\\"foo_bar\\");

	return pages.map((page) => ({ uid: page.uid }));
}
~~~

Make sure all of your import paths are correct. See the [install guide](https://prismic.io/docs/setup-nextjs) for more information.",
  "label": "App Router",
}
`;

exports[`PageSnippet > App Router > return a snippet with TypeScript for TypeScript projects 1`] = `
{
  "content": "## Create your Foobar's page component

Add a new route by creating an \`app/[uid]/page.tsx\` file. (If the route should be nested in a child directory, you can create the file in a directory, like \`app/marketing/[uid]/page.tsx\`.)

Paste in this code:

~~~tsx [app/[uid]/page.tsx]
import { Metadata } from \\"next\\";
import { notFound } from \\"next/navigation\\";
import { asImageSrc } from \\"@prismicio/client\\";
import { SliceZone } from \\"@prismicio/react\\";

import { createClient } from \\"@/prismicio\\";
import { components } from \\"@/slices\\";

type Params = { uid: string };

export default async function Page({ params }: { params: Promise<Params> }) {
	const { uid } = await params;
	const client = createClient();
	const page = await client.getByUID(\\"foo_bar\\", uid).catch(() => notFound());

	return <SliceZone slices={page.data.slices} components={components} />;
}

export async function generateMetadata({
	params,
}: {
	params: Promise<Params>;
}): Promise<Metadata> {
	const { uid } = await params;
	const client = createClient();
	const page = await client.getByUID(\\"foo_bar\\", uid).catch(() => notFound());

	return {
		title: page.data.meta_title,
		description: page.data.meta_description,
		openGraph: {
			images: [{ url: asImageSrc(page.data.meta_image) ?? \\"\\" }],
		},
	};
}

export async function generateStaticParams() {
	const client = createClient();
	const pages = await client.getAllByType(\\"foo_bar\\");

	return pages.map((page) => ({ uid: page.uid }));
}
~~~

Make sure all of your import paths are correct. See the [install guide](https://prismic.io/docs/setup-nextjs) for more information.",
  "label": "App Router",
}
`;

exports[`PageSnippet > App Router > supports the special single homepage type 1`] = `
{
  "content": "## Create your Homepage's page component

Add a new route by creating an \`app/page.tsx\` file. (If the route should be nested in a child directory, you can create the file in a directory, like \`app/marketing/page.tsx\`.)

Paste in this code:

~~~tsx [app/page.tsx]
import { type Metadata } from \\"next\\";
import { notFound } from \\"next/navigation\\";
import { asImageSrc } from \\"@prismicio/client\\";
import { SliceZone } from \\"@prismicio/react\\";

import { createClient } from \\"@/prismicio\\";
import { components } from \\"@/slices\\";

export default async function Page() {
	const client = createClient();
	const page = await client.getSingle(\\"homepage\\").catch(() => notFound());

	return <SliceZone slices={page.data.slices} components={components} />;
}

export async function generateMetadata(): Promise<Metadata> {
	const client = createClient();
	const page = await client.getSingle(\\"homepage\\").catch(() => notFound());

	return {
		title: page.data.meta_title,
		description: page.data.meta_description,
		openGraph: {
			images: [{ url: asImageSrc(page.data.meta_image) ?? \\"\\" }],
		},
	};
}
~~~

Make sure all of your import paths are correct. See the [install guide](https://prismic.io/docs/setup-nextjs) for more information.",
  "label": "App Router",
}
`;

exports[`PageSnippet > Pages Router > return a snippet with JavaScript 1`] = `
{
  "content": "## Create your Foobar's page component

Add a new route by creating a \`pages/[uid].js\` file. (If the route should be nested in a child directory, you can create the file in a directory, like \`pages/marketing/[uid].js\`.)

~~~js [pages/[uid].js]
import Head from \\"next/head\\";
import { isFilled, asLink, asImageSrc } from \\"@prismicio/client\\";
import { SliceZone } from \\"@prismicio/react\\";

import { components } from \\"@/slices\\";
import { createClient } from \\"@/prismicio\\";

export default function Page({ page }) {
	return (
		<>
			<Head>
				<title>{page.data.meta_title}</title>
				{isFilled.keyText(page.data.meta_description) ? (
					<meta name=\\"description\\" content={page.data.meta_description} />
				) : null}
				{isFilled.image(page.data.meta_image) ? (
					<meta
						property=\\"og:image\\"
						content={asImageSrc(page.data.meta_image)}
					/>
				) : null}
			</Head>
			<SliceZone slices={page.data.slices} components={components} />
		</>
	);
}

export async function getStaticProps({ params, previewData }) {
	const client = createClient({ previewData });
	const page = await client.getByUID(\\"foo_bar\\", params.uid);

	return { props: { page } };
}

export async function getStaticPaths() {
	const client = createClient();
	const pages = await client.getAllByType(\\"foo_bar\\");

	return {
		paths: pages.map((page) => asLink(page)),
		fallback: false,
	};
}
~~~

Make sure all of your import paths are correct. See the [install guide](https://prismic.io/docs/setup-nextjs) for more information.",
  "label": "Pages Router",
}
`;

exports[`PageSnippet > Pages Router > return a snippet with TypeScript for TypeScript projects 1`] = `
{
  "content": "## Create your Foobar's page component

Add a new route by creating a \`pages/[uid].tsx\` file. (If the route should be nested in a child directory, you can create the file in a directory, like \`pages/marketing/[uid].tsx\`.)

~~~tsx [pages/[uid].tsx]
import { GetStaticPropsContext, InferGetStaticPropsType } from \\"next\\";
import Head from \\"next/head\\";
import { isFilled, asLink, asImageSrc } from \\"@prismicio/client\\";
import { SliceZone } from \\"@prismicio/react\\";

import { components } from \\"@/slices\\";
import { createClient } from \\"@/prismicio\\";

type Params = { uid: string };

export default function Page({
	page,
}: InferGetStaticPropsType<typeof getStaticProps>) {
	return (
		<>
			<Head>
				<title>{page.data.meta_title}</title>
				{isFilled.keyText(page.data.meta_description) ? (
					<meta name=\\"description\\" content={page.data.meta_description} />
				) : null}
				{isFilled.image(page.data.meta_image) ? (
					<meta
						property=\\"og:image\\"
						content={asImageSrc(page.data.meta_image)}
					/>
				) : null}
			</Head>
			<SliceZone slices={page.data.slices} components={components} />
		</>
	);
}

export async function getStaticProps({
	params,
	previewData,
}: GetStaticPropsContext<Params>) {
	const client = createClient({ previewData });
	const page = await client.getByUID(\\"foo_bar\\", params!.uid);

	return { props: { page } };
}

export async function getStaticPaths() {
	const client = createClient();
	const pages = await client.getAllByType(\\"foo_bar\\");

	return {
		paths: pages.map((page) => asLink(page)),
		fallback: false,
	};
}
~~~

Make sure all of your import paths are correct. See the [install guide](https://prismic.io/docs/setup-nextjs) for more information.",
  "label": "Pages Router",
}
`;

exports[`PageSnippet > Pages Router > supports the special single homepage type 1`] = `
{
  "content": "## Create your Homepage's page component

Add a new route by creating a \`pages/index.tsx\` file. (If the route should be nested in a child directory, you can create the file in a directory, like \`pages/marketing/index.tsx\`.)

~~~tsx [pages/index.tsx]
import { GetStaticPropsContext, InferGetStaticPropsType } from \\"next\\";
import Head from \\"next/head\\";
import { isFilled, asImageSrc } from \\"@prismicio/client\\";
import { SliceZone } from \\"@prismicio/react\\";

import { components } from \\"@/slices\\";
import { createClient } from \\"@/prismicio\\";

export default function Page({
	page,
}: InferGetStaticPropsType<typeof getStaticProps>) {
	return (
		<>
			<Head>
				<title>{page.data.meta_title}</title>
				{isFilled.keyText(page.data.meta_description) ? (
					<meta name=\\"description\\" content={page.data.meta_description} />
				) : null}
				{isFilled.image(page.data.meta_image) ? (
					<meta
						property=\\"og:image\\"
						content={asImageSrc(page.data.meta_image)}
					/>
				) : null}
			</Head>
			<SliceZone slices={page.data.slices} components={components} />
		</>
	);
}

export async function getStaticProps({ previewData }: GetStaticPropsContext) {
	const client = createClient({ previewData });
	const page = await client.getSingle(\\"homepage\\");

	return { props: { page } };
}
~~~

Make sure all of your import paths are correct. See the [install guide](https://prismic.io/docs/setup-nextjs) for more information.",
  "label": "Pages Router",
}
`;
